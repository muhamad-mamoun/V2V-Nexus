
Nucleo_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f34  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080010c8  080010c8  000110c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800116c  0800116c  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  0800116c  0800116c  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800116c  0800116c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800116c  0800116c  0001116c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001170  08001170  00011170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08001174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          00000158  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000180  20000180  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001842  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000008c9  00000000  00000000  000218dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001f8  00000000  00000000  000221a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000015e  00000000  00000000  000223a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000018da  00000000  00000000  000224fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001159  00000000  00000000  00023dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00006f02  00000000  00000000  00024f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000062c  00000000  00000000  0002be34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0002c460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000028 	.word	0x20000028
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080010b0 	.word	0x080010b0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000002c 	.word	0x2000002c
 80001d0:	080010b0 	.word	0x080010b0

080001d4 <FPEC_voidEraseAppArea>:
#include "FPEC_interface.h"
#include "FPEC_private.h"
#include "FPEC_config.h"

void FPEC_voidEraseAppArea(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	u8 i;
	
	for (i=6;i<512;i++)
 80001da:	2306      	movs	r3, #6
 80001dc:	71fb      	strb	r3, [r7, #7]
	{
		FPEC_voidFlashPageErase(i);
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 f805 	bl	80001f0 <FPEC_voidFlashPageErase>
	for (i=6;i<512;i++)
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	3301      	adds	r3, #1
 80001ea:	71fb      	strb	r3, [r7, #7]
		FPEC_voidFlashPageErase(i);
 80001ec:	e7f7      	b.n	80001de <FPEC_voidEraseAppArea+0xa>
	...

080001f0 <FPEC_voidFlashPageErase>:
	}
}

void FPEC_voidFlashPageErase(u8 Copy_u8PageNumber)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	71fb      	strb	r3, [r7, #7]
	/* Wait Busy Flag */
	while (GET_BIT(FPEC->SR,0) == 1);
 80001fa:	bf00      	nop
 80001fc:	4b1e      	ldr	r3, [pc, #120]	; (8000278 <FPEC_voidFlashPageErase+0x88>)
 80001fe:	68db      	ldr	r3, [r3, #12]
 8000200:	f003 0301 	and.w	r3, r3, #1
 8000204:	2b01      	cmp	r3, #1
 8000206:	d0f9      	beq.n	80001fc <FPEC_voidFlashPageErase+0xc>

	/* Check if FPEC is locked or not */
	if ( GET_BIT(FPEC->CR,7) == 1)
 8000208:	4b1b      	ldr	r3, [pc, #108]	; (8000278 <FPEC_voidFlashPageErase+0x88>)
 800020a:	691b      	ldr	r3, [r3, #16]
 800020c:	09db      	lsrs	r3, r3, #7
 800020e:	f003 0301 	and.w	r3, r3, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	d105      	bne.n	8000222 <FPEC_voidFlashPageErase+0x32>
	{
		FPEC -> KEYR = 0x45670123;
 8000216:	4b18      	ldr	r3, [pc, #96]	; (8000278 <FPEC_voidFlashPageErase+0x88>)
 8000218:	4a18      	ldr	r2, [pc, #96]	; (800027c <FPEC_voidFlashPageErase+0x8c>)
 800021a:	605a      	str	r2, [r3, #4]
		FPEC -> KEYR = 0xCDEF89AB;
 800021c:	4b16      	ldr	r3, [pc, #88]	; (8000278 <FPEC_voidFlashPageErase+0x88>)
 800021e:	4a18      	ldr	r2, [pc, #96]	; (8000280 <FPEC_voidFlashPageErase+0x90>)
 8000220:	605a      	str	r2, [r3, #4]
	}
	
	/* Page Erase Operation */
	SET_BIT(FPEC->CR,1);
 8000222:	4b15      	ldr	r3, [pc, #84]	; (8000278 <FPEC_voidFlashPageErase+0x88>)
 8000224:	691b      	ldr	r3, [r3, #16]
 8000226:	4a14      	ldr	r2, [pc, #80]	; (8000278 <FPEC_voidFlashPageErase+0x88>)
 8000228:	f043 0302 	orr.w	r3, r3, #2
 800022c:	6113      	str	r3, [r2, #16]

	/* Write Page address */
	FPEC->AR = (u32)(Copy_u8PageNumber * 1024) + 0x08000000 ;
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	029b      	lsls	r3, r3, #10
 8000232:	4a11      	ldr	r2, [pc, #68]	; (8000278 <FPEC_voidFlashPageErase+0x88>)
 8000234:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000238:	6153      	str	r3, [r2, #20]

	/* Start operation */
	SET_BIT(FPEC->CR,6);
 800023a:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <FPEC_voidFlashPageErase+0x88>)
 800023c:	691b      	ldr	r3, [r3, #16]
 800023e:	4a0e      	ldr	r2, [pc, #56]	; (8000278 <FPEC_voidFlashPageErase+0x88>)
 8000240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000244:	6113      	str	r3, [r2, #16]

	/* Wait Busy Flag */
	while (GET_BIT(FPEC->SR,0) == 1);
 8000246:	bf00      	nop
 8000248:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <FPEC_voidFlashPageErase+0x88>)
 800024a:	68db      	ldr	r3, [r3, #12]
 800024c:	f003 0301 	and.w	r3, r3, #1
 8000250:	2b01      	cmp	r3, #1
 8000252:	d0f9      	beq.n	8000248 <FPEC_voidFlashPageErase+0x58>

	/* EOP */
	SET_BIT(FPEC->SR,5);
 8000254:	4b08      	ldr	r3, [pc, #32]	; (8000278 <FPEC_voidFlashPageErase+0x88>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	4a07      	ldr	r2, [pc, #28]	; (8000278 <FPEC_voidFlashPageErase+0x88>)
 800025a:	f043 0320 	orr.w	r3, r3, #32
 800025e:	60d3      	str	r3, [r2, #12]
	CLR_BIT(FPEC->CR,1);
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <FPEC_voidFlashPageErase+0x88>)
 8000262:	691b      	ldr	r3, [r3, #16]
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <FPEC_voidFlashPageErase+0x88>)
 8000266:	f023 0302 	bic.w	r3, r3, #2
 800026a:	6113      	str	r3, [r2, #16]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	40022000 	.word	0x40022000
 800027c:	45670123 	.word	0x45670123
 8000280:	cdef89ab 	.word	0xcdef89ab

08000284 <FPEC_voidFlashWrite>:

void FPEC_voidFlashWrite(u32 Copy_u32Address, u16* Copy_u16Data, u8 Copy_u8Length)
{
 8000284:	b480      	push	{r7}
 8000286:	b087      	sub	sp, #28
 8000288:	af00      	add	r7, sp, #0
 800028a:	60f8      	str	r0, [r7, #12]
 800028c:	60b9      	str	r1, [r7, #8]
 800028e:	4613      	mov	r3, r2
 8000290:	71fb      	strb	r3, [r7, #7]
	u8 i;
	volatile u16 Temp;

	while (GET_BIT(FPEC->SR,0) == 1);
 8000292:	bf00      	nop
 8000294:	4b26      	ldr	r3, [pc, #152]	; (8000330 <FPEC_voidFlashWrite+0xac>)
 8000296:	68db      	ldr	r3, [r3, #12]
 8000298:	f003 0301 	and.w	r3, r3, #1
 800029c:	2b01      	cmp	r3, #1
 800029e:	d0f9      	beq.n	8000294 <FPEC_voidFlashWrite+0x10>

	/* Check if FPEC is locked or not */
	if ( /* FPEC_CR->BitAccess.LOCK == 1 */ GET_BIT(FPEC->CR,7) == 1 )
 80002a0:	4b23      	ldr	r3, [pc, #140]	; (8000330 <FPEC_voidFlashWrite+0xac>)
 80002a2:	691b      	ldr	r3, [r3, #16]
 80002a4:	09db      	lsrs	r3, r3, #7
 80002a6:	f003 0301 	and.w	r3, r3, #1
 80002aa:	2b01      	cmp	r3, #1
 80002ac:	d105      	bne.n	80002ba <FPEC_voidFlashWrite+0x36>
	{
		FPEC -> KEYR = 0x45670123;
 80002ae:	4b20      	ldr	r3, [pc, #128]	; (8000330 <FPEC_voidFlashWrite+0xac>)
 80002b0:	4a20      	ldr	r2, [pc, #128]	; (8000334 <FPEC_voidFlashWrite+0xb0>)
 80002b2:	605a      	str	r2, [r3, #4]
		FPEC -> KEYR = 0xCDEF89AB;
 80002b4:	4b1e      	ldr	r3, [pc, #120]	; (8000330 <FPEC_voidFlashWrite+0xac>)
 80002b6:	4a20      	ldr	r2, [pc, #128]	; (8000338 <FPEC_voidFlashWrite+0xb4>)
 80002b8:	605a      	str	r2, [r3, #4]
	}
	
	
	for (i = 0; i< Copy_u8Length; i++)
 80002ba:	2300      	movs	r3, #0
 80002bc:	75fb      	strb	r3, [r7, #23]
 80002be:	e02b      	b.n	8000318 <FPEC_voidFlashWrite+0x94>
	{
		/* Write Flash Programming */
		SET_BIT(FPEC->CR,0);
 80002c0:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <FPEC_voidFlashWrite+0xac>)
 80002c2:	691b      	ldr	r3, [r3, #16]
 80002c4:	4a1a      	ldr	r2, [pc, #104]	; (8000330 <FPEC_voidFlashWrite+0xac>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6113      	str	r3, [r2, #16]

		/* Half word operation */

		Temp = Copy_u16Data[i];
 80002cc:	7dfb      	ldrb	r3, [r7, #23]
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	68ba      	ldr	r2, [r7, #8]
 80002d2:	4413      	add	r3, r2
 80002d4:	881b      	ldrh	r3, [r3, #0]
 80002d6:	82bb      	strh	r3, [r7, #20]
		*((volatile u16*)Copy_u32Address) = Copy_u16Data[i];
 80002d8:	7dfb      	ldrb	r3, [r7, #23]
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	68ba      	ldr	r2, [r7, #8]
 80002de:	441a      	add	r2, r3
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	8812      	ldrh	r2, [r2, #0]
 80002e4:	801a      	strh	r2, [r3, #0]
		Copy_u32Address += 2 ;
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	3302      	adds	r3, #2
 80002ea:	60fb      	str	r3, [r7, #12]

		/* Wait Busy Flag */
		while (GET_BIT(FPEC->SR,0) == 1);
 80002ec:	bf00      	nop
 80002ee:	4b10      	ldr	r3, [pc, #64]	; (8000330 <FPEC_voidFlashWrite+0xac>)
 80002f0:	68db      	ldr	r3, [r3, #12]
 80002f2:	f003 0301 	and.w	r3, r3, #1
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d0f9      	beq.n	80002ee <FPEC_voidFlashWrite+0x6a>
	
		/* EOP */
		SET_BIT(FPEC->SR,5);
 80002fa:	4b0d      	ldr	r3, [pc, #52]	; (8000330 <FPEC_voidFlashWrite+0xac>)
 80002fc:	68db      	ldr	r3, [r3, #12]
 80002fe:	4a0c      	ldr	r2, [pc, #48]	; (8000330 <FPEC_voidFlashWrite+0xac>)
 8000300:	f043 0320 	orr.w	r3, r3, #32
 8000304:	60d3      	str	r3, [r2, #12]
		CLR_BIT(FPEC->CR,0);
 8000306:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <FPEC_voidFlashWrite+0xac>)
 8000308:	691b      	ldr	r3, [r3, #16]
 800030a:	4a09      	ldr	r2, [pc, #36]	; (8000330 <FPEC_voidFlashWrite+0xac>)
 800030c:	f023 0301 	bic.w	r3, r3, #1
 8000310:	6113      	str	r3, [r2, #16]
	for (i = 0; i< Copy_u8Length; i++)
 8000312:	7dfb      	ldrb	r3, [r7, #23]
 8000314:	3301      	adds	r3, #1
 8000316:	75fb      	strb	r3, [r7, #23]
 8000318:	7dfa      	ldrb	r2, [r7, #23]
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	429a      	cmp	r2, r3
 800031e:	d3cf      	bcc.n	80002c0 <FPEC_voidFlashWrite+0x3c>
	}

}
 8000320:	bf00      	nop
 8000322:	bf00      	nop
 8000324:	371c      	adds	r7, #28
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40022000 	.word	0x40022000
 8000334:	45670123 	.word	0x45670123
 8000338:	cdef89ab 	.word	0xcdef89ab

0800033c <AsciToHex>:

u16 Data[100] = {0};
u32 Address= 0x08000000;

u8 AsciToHex(u8 Copy_u8Asci)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]
	u8 Result;
	if ( (Copy_u8Asci >= 48) && (Copy_u8Asci <= 57) )
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	2b2f      	cmp	r3, #47	; 0x2f
 800034a:	d906      	bls.n	800035a <AsciToHex+0x1e>
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	2b39      	cmp	r3, #57	; 0x39
 8000350:	d803      	bhi.n	800035a <AsciToHex+0x1e>
	{
		Result = Copy_u8Asci - 48;
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	3b30      	subs	r3, #48	; 0x30
 8000356:	73fb      	strb	r3, [r7, #15]
 8000358:	e002      	b.n	8000360 <AsciToHex+0x24>
	}

	else
	{
		Result = Copy_u8Asci - 55;
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	3b37      	subs	r3, #55	; 0x37
 800035e:	73fb      	strb	r3, [r7, #15]
	}

	return Result;
 8000360:	7bfb      	ldrb	r3, [r7, #15]
}
 8000362:	4618      	mov	r0, r3
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
	...

08000370 <ParseData>:


void ParseData(u8* Copy_u8BufData)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	u8 DigitLow,DigitHigh,CC,i;
	u8 DataDigit0,DataDigit1,DataDigit2,DataDigit3;
	u8 DataCounter = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	75bb      	strb	r3, [r7, #22]

	/* Get Character Count */
	DigitHigh = AsciToHex (Copy_u8BufData[1]);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3301      	adds	r3, #1
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff ffda 	bl	800033c <AsciToHex>
 8000388:	4603      	mov	r3, r0
 800038a:	757b      	strb	r3, [r7, #21]
	DigitLow  = AsciToHex (Copy_u8BufData[2]);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	3302      	adds	r3, #2
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ffd2 	bl	800033c <AsciToHex>
 8000398:	4603      	mov	r3, r0
 800039a:	753b      	strb	r3, [r7, #20]
	CC        = (DigitHigh<<4) | DigitLow ;
 800039c:	7d7b      	ldrb	r3, [r7, #21]
 800039e:	011b      	lsls	r3, r3, #4
 80003a0:	b25a      	sxtb	r2, r3
 80003a2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80003a6:	4313      	orrs	r3, r2
 80003a8:	b25b      	sxtb	r3, r3
 80003aa:	74fb      	strb	r3, [r7, #19]

	/* Get Address */
	DataDigit0 = AsciToHex (Copy_u8BufData[3]);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	3303      	adds	r3, #3
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff ffc2 	bl	800033c <AsciToHex>
 80003b8:	4603      	mov	r3, r0
 80003ba:	74bb      	strb	r3, [r7, #18]
	DataDigit1 = AsciToHex (Copy_u8BufData[4]);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3304      	adds	r3, #4
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ffba 	bl	800033c <AsciToHex>
 80003c8:	4603      	mov	r3, r0
 80003ca:	747b      	strb	r3, [r7, #17]
	DataDigit2 = AsciToHex (Copy_u8BufData[5]);
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3305      	adds	r3, #5
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	4618      	mov	r0, r3
 80003d4:	f7ff ffb2 	bl	800033c <AsciToHex>
 80003d8:	4603      	mov	r3, r0
 80003da:	743b      	strb	r3, [r7, #16]
	DataDigit3 = AsciToHex (Copy_u8BufData[6]);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	3306      	adds	r3, #6
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ffaa 	bl	800033c <AsciToHex>
 80003e8:	4603      	mov	r3, r0
 80003ea:	73fb      	strb	r3, [r7, #15]

	/* Clear Low Part of Address */
	Address = Address & 0xFFFF0000;
 80003ec:	4b39      	ldr	r3, [pc, #228]	; (80004d4 <ParseData+0x164>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	0c1b      	lsrs	r3, r3, #16
 80003f2:	041b      	lsls	r3, r3, #16
 80003f4:	4a37      	ldr	r2, [pc, #220]	; (80004d4 <ParseData+0x164>)
 80003f6:	6013      	str	r3, [r2, #0]
	Address = Address | (DataDigit3) | (DataDigit2 << 4) | (DataDigit1 << 8) | (DataDigit0<<12);
 80003f8:	7bfa      	ldrb	r2, [r7, #15]
 80003fa:	4b36      	ldr	r3, [pc, #216]	; (80004d4 <ParseData+0x164>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4313      	orrs	r3, r2
 8000400:	7c3a      	ldrb	r2, [r7, #16]
 8000402:	0112      	lsls	r2, r2, #4
 8000404:	4313      	orrs	r3, r2
 8000406:	7c7a      	ldrb	r2, [r7, #17]
 8000408:	0212      	lsls	r2, r2, #8
 800040a:	4313      	orrs	r3, r2
 800040c:	7cba      	ldrb	r2, [r7, #18]
 800040e:	0312      	lsls	r2, r2, #12
 8000410:	4313      	orrs	r3, r2
 8000412:	4a30      	ldr	r2, [pc, #192]	; (80004d4 <ParseData+0x164>)
 8000414:	6013      	str	r3, [r2, #0]

	for (i=0;i<CC/2; i++)
 8000416:	2300      	movs	r3, #0
 8000418:	75fb      	strb	r3, [r7, #23]
 800041a:	e047      	b.n	80004ac <ParseData+0x13c>
	{
		DataDigit0 = AsciToHex (Copy_u8BufData[4*i+9 ]);
 800041c:	7dfb      	ldrb	r3, [r7, #23]
 800041e:	009b      	lsls	r3, r3, #2
 8000420:	3309      	adds	r3, #9
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	4413      	add	r3, r2
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff ff87 	bl	800033c <AsciToHex>
 800042e:	4603      	mov	r3, r0
 8000430:	74bb      	strb	r3, [r7, #18]
		DataDigit1 = AsciToHex (Copy_u8BufData[4*i+10]);
 8000432:	7dfb      	ldrb	r3, [r7, #23]
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	330a      	adds	r3, #10
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	4413      	add	r3, r2
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff ff7c 	bl	800033c <AsciToHex>
 8000444:	4603      	mov	r3, r0
 8000446:	747b      	strb	r3, [r7, #17]
		DataDigit2 = AsciToHex (Copy_u8BufData[4*i+11]);
 8000448:	7dfb      	ldrb	r3, [r7, #23]
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	330b      	adds	r3, #11
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	4413      	add	r3, r2
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff ff71 	bl	800033c <AsciToHex>
 800045a:	4603      	mov	r3, r0
 800045c:	743b      	strb	r3, [r7, #16]
		DataDigit3 = AsciToHex (Copy_u8BufData[4*i+12]);
 800045e:	7dfb      	ldrb	r3, [r7, #23]
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	330c      	adds	r3, #12
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	4413      	add	r3, r2
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	4618      	mov	r0, r3
 800046c:	f7ff ff66 	bl	800033c <AsciToHex>
 8000470:	4603      	mov	r3, r0
 8000472:	73fb      	strb	r3, [r7, #15]

		Data[DataCounter] = (DataDigit3 << 8) | (DataDigit2 << 12) | (DataDigit1) | (DataDigit0<<4);
 8000474:	7bfb      	ldrb	r3, [r7, #15]
 8000476:	021b      	lsls	r3, r3, #8
 8000478:	b21a      	sxth	r2, r3
 800047a:	7c3b      	ldrb	r3, [r7, #16]
 800047c:	031b      	lsls	r3, r3, #12
 800047e:	b21b      	sxth	r3, r3
 8000480:	4313      	orrs	r3, r2
 8000482:	b21a      	sxth	r2, r3
 8000484:	7c7b      	ldrb	r3, [r7, #17]
 8000486:	b21b      	sxth	r3, r3
 8000488:	4313      	orrs	r3, r2
 800048a:	b21a      	sxth	r2, r3
 800048c:	7cbb      	ldrb	r3, [r7, #18]
 800048e:	011b      	lsls	r3, r3, #4
 8000490:	b21b      	sxth	r3, r3
 8000492:	4313      	orrs	r3, r2
 8000494:	b21a      	sxth	r2, r3
 8000496:	7dbb      	ldrb	r3, [r7, #22]
 8000498:	b291      	uxth	r1, r2
 800049a:	4a0f      	ldr	r2, [pc, #60]	; (80004d8 <ParseData+0x168>)
 800049c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		DataCounter++;
 80004a0:	7dbb      	ldrb	r3, [r7, #22]
 80004a2:	3301      	adds	r3, #1
 80004a4:	75bb      	strb	r3, [r7, #22]
	for (i=0;i<CC/2; i++)
 80004a6:	7dfb      	ldrb	r3, [r7, #23]
 80004a8:	3301      	adds	r3, #1
 80004aa:	75fb      	strb	r3, [r7, #23]
 80004ac:	7cfb      	ldrb	r3, [r7, #19]
 80004ae:	085b      	lsrs	r3, r3, #1
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	7dfa      	ldrb	r2, [r7, #23]
 80004b4:	429a      	cmp	r2, r3
 80004b6:	d3b1      	bcc.n	800041c <ParseData+0xac>
	}

	FPEC_voidFlashWrite(Address,Data,CC/2);
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <ParseData+0x164>)
 80004ba:	6818      	ldr	r0, [r3, #0]
 80004bc:	7cfb      	ldrb	r3, [r7, #19]
 80004be:	085b      	lsrs	r3, r3, #1
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	461a      	mov	r2, r3
 80004c4:	4904      	ldr	r1, [pc, #16]	; (80004d8 <ParseData+0x168>)
 80004c6:	f7ff fedd 	bl	8000284 <FPEC_voidFlashWrite>
}
 80004ca:	bf00      	nop
 80004cc:	3718      	adds	r7, #24
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000000 	.word	0x20000000
 80004d8:	20000044 	.word	0x20000044

080004dc <ParseUpperAddress>:

void ParseUpperAddress(u8* Copy_u8BufData)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
//	DataDigit3 = AsciToHex (Copy_u8BufData[6]);
//
//	/* Clear Low Part of Address */
//	Address = Address & (u32)0x0000FFFF;
//	Address = Address | (u32)((u32)(DataDigit3 << 28) | (u32)(DataDigit2 << 24) | (u32)(DataDigit1 << 20) | (u32)(DataDigit0 << 16));
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <Parser_voidParseRecord>:

void Parser_voidParseRecord(u8* Copy_u8BufData)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	switch (Copy_u8BufData[8])
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	3308      	adds	r3, #8
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b30      	cmp	r3, #48	; 0x30
 8000500:	d002      	beq.n	8000508 <Parser_voidParseRecord+0x18>
 8000502:	2b34      	cmp	r3, #52	; 0x34
 8000504:	d004      	beq.n	8000510 <Parser_voidParseRecord+0x20>
	{
	case '0': ParseData(Copy_u8BufData); break;
	case '4': ParseUpperAddress(Copy_u8BufData); break;
	}
}
 8000506:	e007      	b.n	8000518 <Parser_voidParseRecord+0x28>
	case '0': ParseData(Copy_u8BufData); break;
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f7ff ff31 	bl	8000370 <ParseData>
 800050e:	e003      	b.n	8000518 <Parser_voidParseRecord+0x28>
	case '4': ParseUpperAddress(Copy_u8BufData); break;
 8000510:	6878      	ldr	r0, [r7, #4]
 8000512:	f7ff ffe3 	bl	80004dc <ParseUpperAddress>
 8000516:	bf00      	nop
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <RCC_voidInitSYSCLK>:

#include "RCC_prv.h"
#include "RCC.h"

void RCC_voidInitSYSCLK(void)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
	u32 Time = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	607b      	str	r3, [r7, #4]
	#if SYS_CLK==SYSCLK_HSE
		RCC->RCC_CR = 0x00010000;
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <RCC_voidInitSYSCLK+0x48>)
 800052c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000530:	601a      	str	r2, [r3, #0]
		while(GET_BIT(RCC->RCC_CR , 17) == 0 && Time < TIME_OUT)
 8000532:	e002      	b.n	800053a <RCC_voidInitSYSCLK+0x1a>
		 {
			 Time++;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3301      	adds	r3, #1
 8000538:	607b      	str	r3, [r7, #4]
		while(GET_BIT(RCC->RCC_CR , 17) == 0 && Time < TIME_OUT)
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <RCC_voidInitSYSCLK+0x48>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000542:	2b00      	cmp	r3, #0
 8000544:	d103      	bne.n	800054e <RCC_voidInitSYSCLK+0x2e>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4a08      	ldr	r2, [pc, #32]	; (800056c <RCC_voidInitSYSCLK+0x4c>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d9f2      	bls.n	8000534 <RCC_voidInitSYSCLK+0x14>
		 }
		 if (Time == TIME_OUT)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4a07      	ldr	r2, [pc, #28]	; (8000570 <RCC_voidInitSYSCLK+0x50>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d002      	beq.n	800055c <RCC_voidInitSYSCLK+0x3c>
		 {
			 //return error
		 }
		 else
		 {
			 RCC->RCC_CFGR = 0x00000001;   //SET SYSTEM CLK
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <RCC_voidInitSYSCLK+0x48>)
 8000558:	2201      	movs	r2, #1
 800055a:	605a      	str	r2, [r3, #4]
		 }
	
	#elif SYS_CLK==SYSCLK_PLL
		#error ("PLL NOT VALID OPTION TILL NOW")
	#endif
}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	40021000 	.word	0x40021000
 800056c:	000f423f 	.word	0x000f423f
 8000570:	000f4240 	.word	0x000f4240

08000574 <RCC_voidEnablePeripheral>:


void RCC_voidEnablePeripheral(u8 Copy_u8Bus, u8 Copy_u8Peripheral)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	460a      	mov	r2, r1
 800057e:	71fb      	strb	r3, [r7, #7]
 8000580:	4613      	mov	r3, r2
 8000582:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8Bus)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	2b02      	cmp	r3, #2
 8000588:	d011      	beq.n	80005ae <RCC_voidEnablePeripheral+0x3a>
 800058a:	2b02      	cmp	r3, #2
 800058c:	dc25      	bgt.n	80005da <RCC_voidEnablePeripheral+0x66>
 800058e:	2b00      	cmp	r3, #0
 8000590:	d002      	beq.n	8000598 <RCC_voidEnablePeripheral+0x24>
 8000592:	2b01      	cmp	r3, #1
 8000594:	d016      	beq.n	80005c4 <RCC_voidEnablePeripheral+0x50>
			break;
		case APB2_BUS:
			SET_BIT(RCC->RCC_APB2ENR,Copy_u8Peripheral);
			break;
	}
}
 8000596:	e020      	b.n	80005da <RCC_voidEnablePeripheral+0x66>
			SET_BIT(RCC->RCC_AHBENR,Copy_u8Peripheral);
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <RCC_voidEnablePeripheral+0x74>)
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	79ba      	ldrb	r2, [r7, #6]
 800059e:	2101      	movs	r1, #1
 80005a0:	fa01 f202 	lsl.w	r2, r1, r2
 80005a4:	4611      	mov	r1, r2
 80005a6:	4a10      	ldr	r2, [pc, #64]	; (80005e8 <RCC_voidEnablePeripheral+0x74>)
 80005a8:	430b      	orrs	r3, r1
 80005aa:	6153      	str	r3, [r2, #20]
			break;
 80005ac:	e015      	b.n	80005da <RCC_voidEnablePeripheral+0x66>
			SET_BIT(RCC->RCC_APB1ENR,Copy_u8Peripheral);
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <RCC_voidEnablePeripheral+0x74>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	79ba      	ldrb	r2, [r7, #6]
 80005b4:	2101      	movs	r1, #1
 80005b6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ba:	4611      	mov	r1, r2
 80005bc:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <RCC_voidEnablePeripheral+0x74>)
 80005be:	430b      	orrs	r3, r1
 80005c0:	61d3      	str	r3, [r2, #28]
			break;
 80005c2:	e00a      	b.n	80005da <RCC_voidEnablePeripheral+0x66>
			SET_BIT(RCC->RCC_APB2ENR,Copy_u8Peripheral);
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <RCC_voidEnablePeripheral+0x74>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	79ba      	ldrb	r2, [r7, #6]
 80005ca:	2101      	movs	r1, #1
 80005cc:	fa01 f202 	lsl.w	r2, r1, r2
 80005d0:	4611      	mov	r1, r2
 80005d2:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <RCC_voidEnablePeripheral+0x74>)
 80005d4:	430b      	orrs	r3, r1
 80005d6:	6193      	str	r3, [r2, #24]
			break;
 80005d8:	bf00      	nop
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000

080005ec <MSTK_voidInit>:

/* Define Variable for interval mode */
static u8 MSTK_u8ModeOfInterval;

void MSTK_voidInit(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
#if MSTK_CLK_SRC == MSTK_SRC_AHB
    /* Disable STK - Disable STK Interrupt - Set clock source AHB */
	MSTK -> CTRL = 0x00000004;
#else
    /* Disable STK - Disable STK Interrupt - Set clock source AHB/8 */
	MSTK -> CTRL = 0;
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <MSTK_voidInit+0x14>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
	
#endif
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	e000e010 	.word	0xe000e010

08000604 <MSTK_voidSetIntervalSingle>:
	MSTK -> VAL  = 0;
	
}

void MSTK_voidSetIntervalSingle  ( u32 Copy_u32Ticks, void (*Copy_ptr)(void) )
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
	/* Stop Timer */
	CLR_BIT(MSTK->CTRL, 0);
 800060e:	4b13      	ldr	r3, [pc, #76]	; (800065c <MSTK_voidSetIntervalSingle+0x58>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a12      	ldr	r2, [pc, #72]	; (800065c <MSTK_voidSetIntervalSingle+0x58>)
 8000614:	f023 0301 	bic.w	r3, r3, #1
 8000618:	6013      	str	r3, [r2, #0]
	MSTK -> LOAD = 0;
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <MSTK_voidSetIntervalSingle+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	605a      	str	r2, [r3, #4]
	MSTK -> VAL  = 0;
 8000620:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MSTK_voidSetIntervalSingle+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]

	/* Load ticks to load register */
	MSTK -> LOAD = Copy_u32Ticks;
 8000626:	4a0d      	ldr	r2, [pc, #52]	; (800065c <MSTK_voidSetIntervalSingle+0x58>)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	6053      	str	r3, [r2, #4]
	
	/* Start Timer */
	SET_BIT(MSTK->CTRL, 0);
 800062c:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MSTK_voidSetIntervalSingle+0x58>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a0a      	ldr	r2, [pc, #40]	; (800065c <MSTK_voidSetIntervalSingle+0x58>)
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	6013      	str	r3, [r2, #0]
	
	/* Save CallBack */
	MSTK_CallBack = Copy_ptr;
 8000638:	4a09      	ldr	r2, [pc, #36]	; (8000660 <MSTK_voidSetIntervalSingle+0x5c>)
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	6013      	str	r3, [r2, #0]
	
	/* Set Mode to Single */
	MSTK_u8ModeOfInterval = MSTK_SINGLE_INTERVAL;
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MSTK_voidSetIntervalSingle+0x60>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	
	/* Enable STK Interrupt */
	SET_BIT(MSTK->CTRL, 1);
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <MSTK_voidSetIntervalSingle+0x58>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <MSTK_voidSetIntervalSingle+0x58>)
 800064a:	f043 0302 	orr.w	r3, r3, #2
 800064e:	6013      	str	r3, [r2, #0]
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000e010 	.word	0xe000e010
 8000660:	2000010c 	.word	0x2000010c
 8000664:	20000110 	.word	0x20000110

08000668 <MSTK_voidStopInterval>:
	/* Enable STK Interrupt */
	SET_BIT(MSTK->CTRL, 1);
}

void MSTK_voidStopInterval(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
	/* Disable STK Interrupt */
	CLR_BIT(MSTK->CTRL, 1);
 800066c:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MSTK_voidStopInterval+0x34>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a0a      	ldr	r2, [pc, #40]	; (800069c <MSTK_voidStopInterval+0x34>)
 8000672:	f023 0302 	bic.w	r3, r3, #2
 8000676:	6013      	str	r3, [r2, #0]
	
	/* Stop Timer */
	SET_BIT(MSTK->CTRL, 0);
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <MSTK_voidStopInterval+0x34>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a07      	ldr	r2, [pc, #28]	; (800069c <MSTK_voidStopInterval+0x34>)
 800067e:	f043 0301 	orr.w	r3, r3, #1
 8000682:	6013      	str	r3, [r2, #0]
	MSTK -> LOAD = 0;
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <MSTK_voidStopInterval+0x34>)
 8000686:	2200      	movs	r2, #0
 8000688:	605a      	str	r2, [r3, #4]
	MSTK -> VAL  = 0;
 800068a:	4b04      	ldr	r3, [pc, #16]	; (800069c <MSTK_voidStopInterval+0x34>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000e010 	.word	0xe000e010

080006a0 <SysTick_Handler>:
	
	return Local_u32RemainTime;
}

void SysTick_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
	u8 Local_u8Temporary;
	
	if (MSTK_u8ModeOfInterval == MSTK_SINGLE_INTERVAL)
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <SysTick_Handler+0x50>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d111      	bne.n	80006d2 <SysTick_Handler+0x32>
	{
		/* Disable STK Interrupt */
		CLR_BIT(MSTK->CTRL, 1);
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SysTick_Handler+0x54>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <SysTick_Handler+0x54>)
 80006b4:	f023 0302 	bic.w	r3, r3, #2
 80006b8:	6013      	str	r3, [r2, #0]
	
		/* Stop Timer */
		SET_BIT(MSTK->CTRL, 0);
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <SysTick_Handler+0x54>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a0d      	ldr	r2, [pc, #52]	; (80006f4 <SysTick_Handler+0x54>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6013      	str	r3, [r2, #0]
		MSTK -> LOAD = 0;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <SysTick_Handler+0x54>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	605a      	str	r2, [r3, #4]
		MSTK -> VAL  = 0;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <SysTick_Handler+0x54>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
	}
	
	/* Callback notification */
	MSTK_CallBack();
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <SysTick_Handler+0x58>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4798      	blx	r3
	
	/* Clear interrupt flag */
	Local_u8Temporary = GET_BIT(MSTK->CTRL,16);
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <SysTick_Handler+0x54>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	0c1b      	lsrs	r3, r3, #16
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	71fb      	strb	r3, [r7, #7]
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000110 	.word	0x20000110
 80006f4:	e000e010 	.word	0xe000e010
 80006f8:	2000010c 	.word	0x2000010c

080006fc <MUSART_voidInit>:
  *             - WrongStopbitSelection: Invalid stop bit configuration.
  ******************************************************************************
  */

UART_tenuErrorStatus MUSART_voidInit(MUARTConfig *Add_CnfgStruct)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
   UART_tenuErrorStatus ErrorStatus =  UART_EOk   ; 
 8000704:	2300      	movs	r3, #0
 8000706:	73fb      	strb	r3, [r7, #15]
   
	 
/*********************************WordLenght********************************/
   switch (Add_CnfgStruct->WordLength)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	785b      	ldrb	r3, [r3, #1]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	2b00      	cmp	r3, #0
 8000710:	d118      	bne.n	8000744 <MUSART_voidInit+0x48>
   {
    case OneStart_8Data:  
                   //MUSART->CR1 |=  OneStart_8Data ;      
										CLR_BIT(MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR1,28);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	b2db      	uxtb	r3, r3
 8000718:	461a      	mov	r2, r3
 800071a:	4ba5      	ldr	r3, [pc, #660]	; (80009b0 <MUSART_voidInit+0x2b4>)
 800071c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000720:	4613      	mov	r3, r2
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000728:	6013      	str	r3, [r2, #0]
										CLR_BIT(MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR1,12);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	461a      	mov	r2, r3
 8000732:	4b9f      	ldr	r3, [pc, #636]	; (80009b0 <MUSART_voidInit+0x2b4>)
 8000734:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000738:	4613      	mov	r3, r2
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000740:	6013      	str	r3, [r2, #0]
    break ;
 8000742:	e002      	b.n	800074a <MUSART_voidInit+0x4e>
    case OneStart_9Data:
                   MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR1 |=  OneStart_9Data ;                
    break ;
		
    default :    
                ErrorStatus = WordLenghtError ; 
 8000744:	2301      	movs	r3, #1
 8000746:	73fb      	strb	r3, [r7, #15]
    break ; 
 8000748:	bf00      	nop
    

   }

   /******************************OverSampling*************************************************/
   switch (Add_CnfgStruct->OverSampling)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	789b      	ldrb	r3, [r3, #2]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d002      	beq.n	800075a <MUSART_voidInit+0x5e>
 8000754:	2b01      	cmp	r3, #1
 8000756:	d01c      	beq.n	8000792 <MUSART_voidInit+0x96>
 8000758:	e037      	b.n	80007ca <MUSART_voidInit+0xce>
   {
     case OV_16:
                CLR_BIT(MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR1 , OVER_SAM) ; 
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	461a      	mov	r2, r3
 8000762:	4b93      	ldr	r3, [pc, #588]	; (80009b0 <MUSART_voidInit+0x2b4>)
 8000764:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000768:	4613      	mov	r3, r2
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000770:	6013      	str	r3, [r2, #0]
               /*Baud Rate For Sampling By 16 */
              MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->BRR =((F_CPU)/(Add_CnfgStruct->BaudRate));
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	88db      	ldrh	r3, [r3, #6]
 8000776:	b29b      	uxth	r3, r3
 8000778:	461a      	mov	r2, r3
 800077a:	4b8e      	ldr	r3, [pc, #568]	; (80009b4 <MUSART_voidInit+0x2b8>)
 800077c:	fb93 f2f2 	sdiv	r2, r3, r2
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	4619      	mov	r1, r3
 8000788:	4b89      	ldr	r3, [pc, #548]	; (80009b0 <MUSART_voidInit+0x2b4>)
 800078a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800078e:	60da      	str	r2, [r3, #12]
              //MUSART->BRR = 0x341 
             /*0x1D4C*/ 


     break ; 
 8000790:	e01e      	b.n	80007d0 <MUSART_voidInit+0xd4>
		 
     case OV_8 :  
                SET_BIT(MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR1 , OVER_SAM) ; 
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	461a      	mov	r2, r3
 800079a:	4b85      	ldr	r3, [pc, #532]	; (80009b0 <MUSART_voidInit+0x2b4>)
 800079c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007a0:	4613      	mov	r3, r2
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007a8:	6013      	str	r3, [r2, #0]
                MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->BRR =(((2)*(F_CPU))/(Add_CnfgStruct->BaudRate));
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	88db      	ldrh	r3, [r3, #6]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b81      	ldr	r3, [pc, #516]	; (80009b8 <MUSART_voidInit+0x2bc>)
 80007b4:	fb93 f2f2 	sdiv	r2, r3, r2
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	4619      	mov	r1, r3
 80007c0:	4b7b      	ldr	r3, [pc, #492]	; (80009b0 <MUSART_voidInit+0x2b4>)
 80007c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007c6:	60da      	str	r2, [r3, #12]

     break ;
 80007c8:	e002      	b.n	80007d0 <MUSART_voidInit+0xd4>
		 
     default :   ErrorStatus = Wrong_Oversampling ; 
 80007ca:	2302      	movs	r3, #2
 80007cc:	73fb      	strb	r3, [r7, #15]
     break ;  
 80007ce:	bf00      	nop
   }

   /******************************ParitySelection****************************************/
   switch (Add_CnfgStruct->ParitySelection)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	78db      	ldrb	r3, [r3, #3]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d02c      	beq.n	8000834 <MUSART_voidInit+0x138>
 80007da:	2b02      	cmp	r3, #2
 80007dc:	dc43      	bgt.n	8000866 <MUSART_voidInit+0x16a>
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d002      	beq.n	80007e8 <MUSART_voidInit+0xec>
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d00d      	beq.n	8000802 <MUSART_voidInit+0x106>
 80007e6:	e03e      	b.n	8000866 <MUSART_voidInit+0x16a>
   {
    case  Parity_Disabled : 
                  CLR_BIT(MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR1 , PCE) ;                 
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	461a      	mov	r2, r3
 80007f0:	4b6f      	ldr	r3, [pc, #444]	; (80009b0 <MUSART_voidInit+0x2b4>)
 80007f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007f6:	4613      	mov	r3, r2
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80007fe:	6013      	str	r3, [r2, #0]
    break ; 
 8000800:	e034      	b.n	800086c <MUSART_voidInit+0x170>
		
    case EvenParity : 
                  SET_BIT(MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR1 , PCE) ;                 
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	4b69      	ldr	r3, [pc, #420]	; (80009b0 <MUSART_voidInit+0x2b4>)
 800080c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000810:	4613      	mov	r3, r2
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000818:	6013      	str	r3, [r2, #0]
                  CLR_BIT(MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR1 , PS) ;                 
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	461a      	mov	r2, r3
 8000822:	4b63      	ldr	r3, [pc, #396]	; (80009b0 <MUSART_voidInit+0x2b4>)
 8000824:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000828:	4613      	mov	r3, r2
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000830:	6013      	str	r3, [r2, #0]

    break ;
 8000832:	e01b      	b.n	800086c <MUSART_voidInit+0x170>
		
    case OddParity:
                    SET_BIT(MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR1 , PCE) ;                 
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	461a      	mov	r2, r3
 800083c:	4b5c      	ldr	r3, [pc, #368]	; (80009b0 <MUSART_voidInit+0x2b4>)
 800083e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000842:	4613      	mov	r3, r2
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800084a:	6013      	str	r3, [r2, #0]
                    SET_BIT(MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR1 , PS) ;                 
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	461a      	mov	r2, r3
 8000854:	4b56      	ldr	r3, [pc, #344]	; (80009b0 <MUSART_voidInit+0x2b4>)
 8000856:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800085a:	4613      	mov	r3, r2
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000862:	6013      	str	r3, [r2, #0]

    break ; 
 8000864:	e002      	b.n	800086c <MUSART_voidInit+0x170>
		
    default :   ErrorStatus = ParitySelectionError ; 
 8000866:	2303      	movs	r3, #3
 8000868:	73fb      	strb	r3, [r7, #15]
    break ; 
 800086a:	bf00      	nop

   }
    
    /* Auto Baud Rate Disable*/
      CLR_BIT (MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR2 , ABREN) ; 
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	461a      	mov	r2, r3
 8000874:	4b4e      	ldr	r3, [pc, #312]	; (80009b0 <MUSART_voidInit+0x2b4>)
 8000876:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800087a:	4613      	mov	r3, r2
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000882:	6053      	str	r3, [r2, #4]
    


/****************************SignificantBit *********************************/
   switch (Add_CnfgStruct->SBFIRST)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	791b      	ldrb	r3, [r3, #4]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2b02      	cmp	r3, #2
 800088c:	d00e      	beq.n	80008ac <MUSART_voidInit+0x1b0>
 800088e:	2b03      	cmp	r3, #3
 8000890:	d119      	bne.n	80008c6 <MUSART_voidInit+0x1ca>
   {
    case LSB : 
               CLR_BIT (MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR2 , MSBFIRST) ;       
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	461a      	mov	r2, r3
 800089a:	4b45      	ldr	r3, [pc, #276]	; (80009b0 <MUSART_voidInit+0x2b4>)
 800089c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008a0:	4613      	mov	r3, r2
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80008a8:	6053      	str	r3, [r2, #4]
    break ; 
 80008aa:	e00c      	b.n	80008c6 <MUSART_voidInit+0x1ca>
		
    case MSB : 
              SET_BIT (MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR2 , MSBFIRST) ; 
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	461a      	mov	r2, r3
 80008b4:	4b3e      	ldr	r3, [pc, #248]	; (80009b0 <MUSART_voidInit+0x2b4>)
 80008b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008ba:	4613      	mov	r3, r2
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008c2:	6053      	str	r3, [r2, #4]
    break ; 
 80008c4:	bf00      	nop

   }

   /*********************************STOPBITS**************************************/
      switch (Add_CnfgStruct->StopBits)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	795b      	ldrb	r3, [r3, #5]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b03      	cmp	r3, #3
 80008ce:	d875      	bhi.n	80009bc <MUSART_voidInit+0x2c0>
 80008d0:	a201      	add	r2, pc, #4	; (adr r2, 80008d8 <MUSART_voidInit+0x1dc>)
 80008d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d6:	bf00      	nop
 80008d8:	080008e9 	.word	0x080008e9
 80008dc:	0800091b 	.word	0x0800091b
 80008e0:	0800094d 	.word	0x0800094d
 80008e4:	0800097f 	.word	0x0800097f
      {
        case OneStopBit : 
                       CLR_BIT (MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR2 , STOP0) ; 
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b2f      	ldr	r3, [pc, #188]	; (80009b0 <MUSART_voidInit+0x2b4>)
 80008f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008f6:	4613      	mov	r3, r2
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008fe:	6053      	str	r3, [r2, #4]
                       CLR_BIT (MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR2 , STOP1) ; 
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	461a      	mov	r2, r3
 8000908:	4b29      	ldr	r3, [pc, #164]	; (80009b0 <MUSART_voidInit+0x2b4>)
 800090a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800090e:	4613      	mov	r3, r2
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000916:	6053      	str	r3, [r2, #4]
        break ;
 8000918:	e053      	b.n	80009c2 <MUSART_voidInit+0x2c6>
				
        case HalfStopBit: 
                       SET_BIT (MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR2 , STOP0) ; 
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	461a      	mov	r2, r3
 8000922:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <MUSART_voidInit+0x2b4>)
 8000924:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000928:	4613      	mov	r3, r2
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000930:	6053      	str	r3, [r2, #4]
                       CLR_BIT (MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR2 , STOP1) ; 
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	461a      	mov	r2, r3
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MUSART_voidInit+0x2b4>)
 800093c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000940:	4613      	mov	r3, r2
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000948:	6053      	str	r3, [r2, #4]
                         
        break ; 
 800094a:	e03a      	b.n	80009c2 <MUSART_voidInit+0x2c6>
				
        case TwoStopBit  : 
                       CLR_BIT (MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR2 , STOP0) ; 
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	461a      	mov	r2, r3
 8000954:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MUSART_voidInit+0x2b4>)
 8000956:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800095a:	4613      	mov	r3, r2
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000962:	6053      	str	r3, [r2, #4]
                       SET_BIT (MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR2 , STOP1) ; 
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	461a      	mov	r2, r3
 800096c:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MUSART_voidInit+0x2b4>)
 800096e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000972:	4613      	mov	r3, r2
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800097a:	6053      	str	r3, [r2, #4]
                        
        break ;
 800097c:	e021      	b.n	80009c2 <MUSART_voidInit+0x2c6>
				
        case OneAHalfStopBit : 
                       SET_BIT (MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR2 , STOP0) ; 
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b2db      	uxtb	r3, r3
 8000984:	461a      	mov	r2, r3
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MUSART_voidInit+0x2b4>)
 8000988:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800098c:	4613      	mov	r3, r2
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000994:	6053      	str	r3, [r2, #4]
                       SET_BIT (MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR2 , STOP1) ; 
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	461a      	mov	r2, r3
 800099e:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <MUSART_voidInit+0x2b4>)
 80009a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009a4:	4613      	mov	r3, r2
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009ac:	6053      	str	r3, [r2, #4]
        break ; 
 80009ae:	e008      	b.n	80009c2 <MUSART_voidInit+0x2c6>
 80009b0:	20000004 	.word	0x20000004
 80009b4:	007a1200 	.word	0x007a1200
 80009b8:	00f42400 	.word	0x00f42400
				
        default:  ErrorStatus = WrongStopbitSelection ;
 80009bc:	2304      	movs	r3, #4
 80009be:	73fb      	strb	r3, [r7, #15]
        break ; 
 80009c0:	bf00      	nop
      }


      /*********************************Interrupt Choice *********************************************/
            switch (Add_CnfgStruct->Interrupt)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	7a1b      	ldrb	r3, [r3, #8]
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	2b03      	cmp	r3, #3
 80009ca:	d857      	bhi.n	8000a7c <MUSART_voidInit+0x380>
 80009cc:	a201      	add	r2, pc, #4	; (adr r2, 80009d4 <MUSART_voidInit+0x2d8>)
 80009ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d2:	bf00      	nop
 80009d4:	080009e5 	.word	0x080009e5
 80009d8:	08000a17 	.word	0x08000a17
 80009dc:	08000a49 	.word	0x08000a49
 80009e0:	08000a63 	.word	0x08000a63
            {
             case Interrupt_Disable:
                                    CLR_BIT(MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR1, RXNEIE); // Disable RXNE interrupt
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	461a      	mov	r2, r3
 80009ec:	4b3a      	ldr	r3, [pc, #232]	; (8000ad8 <MUSART_voidInit+0x3dc>)
 80009ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009f2:	4613      	mov	r3, r2
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f023 0320 	bic.w	r3, r3, #32
 80009fa:	6013      	str	r3, [r2, #0]
                                    CLR_BIT(MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR1, TXEIE);  // Disable TXE interrupt
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b34      	ldr	r3, [pc, #208]	; (8000ad8 <MUSART_voidInit+0x3dc>)
 8000a06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a12:	6013      	str	r3, [r2, #0]
                                                                 break ; 
 8000a14:	e035      	b.n	8000a82 <MUSART_voidInit+0x386>
             case Interrupt_TX_RX_Enable:
                                    SET_BIT(MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR1, RXNEIE); // Enable RXNE interrupt
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b2e      	ldr	r3, [pc, #184]	; (8000ad8 <MUSART_voidInit+0x3dc>)
 8000a20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a24:	4613      	mov	r3, r2
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f043 0320 	orr.w	r3, r3, #32
 8000a2c:	6013      	str	r3, [r2, #0]
                                    SET_BIT(MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR1, TXEIE);  // Enable TXE interrupt
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <MUSART_voidInit+0x3dc>)
 8000a38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a44:	6013      	str	r3, [r2, #0]

                                                                break ;
 8000a46:	e01c      	b.n	8000a82 <MUSART_voidInit+0x386>
             case Interrupt_Enable_TX_Only : 
                                    SET_BIT(MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR1, TXEIE); // Enable RXNE interrupt
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <MUSART_voidInit+0x3dc>)
 8000a52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a56:	4613      	mov	r3, r2
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5e:	6013      	str	r3, [r2, #0]
                                                                break ;
 8000a60:	e00f      	b.n	8000a82 <MUSART_voidInit+0x386>
             case Interrupt_Enable_RX_Only: 
                                    SET_BIT(MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR1, RXNEIE); // Enable RXNE interrupt
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <MUSART_voidInit+0x3dc>)
 8000a6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a70:	4613      	mov	r3, r2
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f043 0320 	orr.w	r3, r3, #32
 8000a78:	6013      	str	r3, [r2, #0]
                                                               break ; 
 8000a7a:	e002      	b.n	8000a82 <MUSART_voidInit+0x386>
             default : ErrorStatus = Interrupt_Enable_RX_Only;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	73fb      	strb	r3, [r7, #15]
             break ; 
 8000a80:	bf00      	nop

    
       /***************************TX_RX_UE -> Enables**********************************************/
         
         /* Rx Enable*/
         SET_BIT(MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR1 , RE) ;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MUSART_voidInit+0x3dc>)
 8000a8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a90:	4613      	mov	r3, r2
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	6013      	str	r3, [r2, #0]
 
        /*TX Enable */
         SET_BIT(MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR1 , TE ) ; 
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <MUSART_voidInit+0x3dc>)
 8000aa4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f043 0308 	orr.w	r3, r3, #8
 8000ab0:	6013      	str	r3, [r2, #0]

        /*Enable UART*/
         SET_BIT(MUSART(arr_Bases[Add_CnfgStruct->UART_Index])->CR1 , UE ) ; 
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <MUSART_voidInit+0x3dc>)
 8000abc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6013      	str	r3, [r2, #0]
			



			return ErrorStatus;
 8000aca:	7bfb      	ldrb	r3, [r7, #15]

}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	20000004 	.word	0x20000004

08000adc <MUSART1_VidSendCharSync>:
  * param   Copy_u8Char: The character to be sent.
  * retval  None
  ******************************************************************************
  */
void MUSART1_VidSendCharSync (u8 UART_INDEX, u8 Copy_u8Char)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	460a      	mov	r2, r1
 8000ae6:	71fb      	strb	r3, [r7, #7]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	71bb      	strb	r3, [r7, #6]
	MUSART(arr_Bases[UART_INDEX]) -> TDR = Copy_u8Char ;
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	4a11      	ldr	r2, [pc, #68]	; (8000b34 <MUSART1_VidSendCharSync+0x58>)
 8000af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af4:	461a      	mov	r2, r3
 8000af6:	79bb      	ldrb	r3, [r7, #6]
 8000af8:	6293      	str	r3, [r2, #40]	; 0x28

	while( GET_BIT( MUSART(arr_Bases[UART_INDEX]) -> ISR , 6 ) == 0) ; 
 8000afa:	bf00      	nop
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	4a0d      	ldr	r2, [pc, #52]	; (8000b34 <MUSART1_VidSendCharSync+0x58>)
 8000b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d0f6      	beq.n	8000afc <MUSART1_VidSendCharSync+0x20>

       /*Clear FLag*/
      SET_BIT(MUSART(arr_Bases[UART_INDEX])->ICR ,6);
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <MUSART1_VidSendCharSync+0x58>)
 8000b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b16:	6a1b      	ldr	r3, [r3, #32]
 8000b18:	79fa      	ldrb	r2, [r7, #7]
 8000b1a:	4906      	ldr	r1, [pc, #24]	; (8000b34 <MUSART1_VidSendCharSync+0x58>)
 8000b1c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b24:	6213      	str	r3, [r2, #32]



}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000004 	.word	0x20000004

08000b38 <MUSART1_VidSendStringSynch>:
  * param   Copy_ptrString: Pointer to the string to be sent.
  * retval  None
  ******************************************************************************
  */
void MUSART1_VidSendStringSynch (u8 UART_INDEX, u8 * Copy_ptrString )
	{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]

	u8 LOC_u8Iterator = 0 ;
 8000b44:	2300      	movs	r3, #0
 8000b46:	73fb      	strb	r3, [r7, #15]

	while ( Copy_ptrString[ LOC_u8Iterator ] != '\0' )
 8000b48:	e00b      	b.n	8000b62 <MUSART1_VidSendStringSynch+0x2a>
  {

		MUSART1_VidSendCharSync(UART_INDEX, Copy_ptrString[ LOC_u8Iterator ] );
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	683a      	ldr	r2, [r7, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	781a      	ldrb	r2, [r3, #0]
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ffc0 	bl	8000adc <MUSART1_VidSendCharSync>
		LOC_u8Iterator++ ;
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	73fb      	strb	r3, [r7, #15]
	while ( Copy_ptrString[ LOC_u8Iterator ] != '\0' )
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1ed      	bne.n	8000b4a <MUSART1_VidSendStringSynch+0x12>
	}
}
 8000b6e:	bf00      	nop
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <MUSART1_u8RecCharSynch>:
  *             - UART_EOk: No error.
  *             - ErrorReceieving: Error occurred during the receiving process.
  ******************************************************************************
  */
UART_tenuErrorStatus MUSART1_u8RecCharSynch (u8 UART_INDEX,u32* pData)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
 
	UART_tenuErrorStatus ErrorStatus = UART_EOk ; 
 8000b84:	2300      	movs	r3, #0
 8000b86:	73fb      	strb	r3, [r7, #15]
	u32 LOC_TimeOut = 0 ;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]

    /*Clear Flag By Software..*/
   // SET_BIT(MUSART->RQR ,3);

	while((GET_BIT (MUSART(arr_Bases[UART_INDEX])->ISR,5) == 0) && ( LOC_TimeOut < THRESHOLD_VALUE ) )
 8000b8c:	e002      	b.n	8000b94 <MUSART1_u8RecCharSynch+0x1c>
	{
		LOC_TimeOut++;
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	3301      	adds	r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
	while((GET_BIT (MUSART(arr_Bases[UART_INDEX])->ISR,5) == 0) && ( LOC_TimeOut < THRESHOLD_VALUE ) )
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	4a11      	ldr	r2, [pc, #68]	; (8000bdc <MUSART1_u8RecCharSynch+0x64>)
 8000b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	f003 0320 	and.w	r3, r3, #32
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d104      	bne.n	8000bb0 <MUSART1_u8RecCharSynch+0x38>
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	f241 3287 	movw	r2, #4999	; 0x1387
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d9ee      	bls.n	8000b8e <MUSART1_u8RecCharSynch+0x16>
	}
	if( LOC_TimeOut >= THRESHOLD_VALUE )
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	f241 3287 	movw	r2, #4999	; 0x1387
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d902      	bls.n	8000bc0 <MUSART1_u8RecCharSynch+0x48>
	{
      ErrorStatus = ErrorReceieving ; 
 8000bba:	2305      	movs	r3, #5
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	e006      	b.n	8000bce <MUSART1_u8RecCharSynch+0x56>
  }
	else
	{
		*pData = MUSART(arr_Bases[UART_INDEX]) -> RDR;
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	4a06      	ldr	r2, [pc, #24]	; (8000bdc <MUSART1_u8RecCharSynch+0x64>)
 8000bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	601a      	str	r2, [r3, #0]
	}

		return ErrorStatus;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]

}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	20000004 	.word	0x20000004

08000be0 <GPIO_configurePin>:
 *                                                          - Pin ID Error.
 *                                                          - Speed Error.
 *                                                          - Mode Error.
 ====================================================================================================================*/
GPIO_errorStatusType GPIO_configurePin(GPIO_configurationsType* a_ptr2configurations)
{
 8000be0:	b4b0      	push	{r4, r5, r7}
 8000be2:	b08d      	sub	sp, #52	; 0x34
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
    GPIO_errorStatusType LOC_errorStatus = GPIO_NO_ERRORS;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIOx_registersType* LOC_ptr2GPIOx[GPIO_NUM_OF_PORTS] = {GPIOA,GPIOB,GPIOC,GPIOD,GPIOE,GPIOF,GPIOG,GPIOH};
 8000bee:	4b7c      	ldr	r3, [pc, #496]	; (8000de0 <GPIO_configurePin+0x200>)
 8000bf0:	f107 040c 	add.w	r4, r7, #12
 8000bf4:	461d      	mov	r5, r3
 8000bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000bfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if(a_ptr2configurations == PTR_NULL)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d103      	bne.n	8000c10 <GPIO_configurePin+0x30>
    {
        LOC_errorStatus = GPIO_NULL_PTR_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000c0e:	e0df      	b.n	8000dd0 <GPIO_configurePin+0x1f0>
    }

    else if(a_ptr2configurations->portID >= GPIO_NUM_OF_PORTS)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b07      	cmp	r3, #7
 8000c16:	d903      	bls.n	8000c20 <GPIO_configurePin+0x40>
    {
        LOC_errorStatus = GPIO_PORT_ID_ERROR;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000c1e:	e0d7      	b.n	8000dd0 <GPIO_configurePin+0x1f0>
    }

    else if(a_ptr2configurations->pinID >= GPIO_NUM_OF_PINS_PER_PORT)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	785b      	ldrb	r3, [r3, #1]
 8000c24:	2b0f      	cmp	r3, #15
 8000c26:	d903      	bls.n	8000c30 <GPIO_configurePin+0x50>
    {
        LOC_errorStatus = GPIO_PIN_ID_ERROR;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000c2e:	e0cf      	b.n	8000dd0 <GPIO_configurePin+0x1f0>
    }

    else if(a_ptr2configurations->pinSpeed > GPIO_HIGH_SPEED)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	78db      	ldrb	r3, [r3, #3]
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	d903      	bls.n	8000c40 <GPIO_configurePin+0x60>
    {
        LOC_errorStatus = GPIO_PIN_SPEED_ERROR;
 8000c38:	2305      	movs	r3, #5
 8000c3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000c3e:	e0c7      	b.n	8000dd0 <GPIO_configurePin+0x1f0>
    }

    else if((a_ptr2configurations->pinMode > GPIO_ALTERNATE_OPEN_DRAIN_MODE) && (a_ptr2configurations->pinMode != GPIO_INPUT_PULLDOWN_MODE))
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	789b      	ldrb	r3, [r3, #2]
 8000c44:	2b06      	cmp	r3, #6
 8000c46:	d907      	bls.n	8000c58 <GPIO_configurePin+0x78>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	789b      	ldrb	r3, [r3, #2]
 8000c4c:	2b08      	cmp	r3, #8
 8000c4e:	d003      	beq.n	8000c58 <GPIO_configurePin+0x78>
    {
        LOC_errorStatus = GPIO_PIN_MODE_ERROR;
 8000c50:	2304      	movs	r3, #4
 8000c52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000c56:	e0bb      	b.n	8000dd0 <GPIO_configurePin+0x1f0>
    }

    else
    {
        /* Set the I/O mode for the required pin [Input - Output - Alternate Function - Analog]. */
        GPIO_WRITE_TWO_BITS((*(LOC_ptr2GPIOx + a_ptr2configurations->portID))->MODER,a_ptr2configurations->pinID,a_ptr2configurations->pinMode);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	f107 020c 	add.w	r2, r7, #12
 8000c62:	4413      	add	r3, r2
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	7852      	ldrb	r2, [r2, #1]
 8000c6c:	0052      	lsls	r2, r2, #1
 8000c6e:	2103      	movs	r1, #3
 8000c70:	fa01 f202 	lsl.w	r2, r1, r2
 8000c74:	43d2      	mvns	r2, r2
 8000c76:	401a      	ands	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	789b      	ldrb	r3, [r3, #2]
 8000c7c:	f003 0103 	and.w	r1, r3, #3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	785b      	ldrb	r3, [r3, #1]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	f107 010c 	add.w	r1, r7, #12
 8000c96:	440b      	add	r3, r1
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4302      	orrs	r2, r0
 8000c9c:	601a      	str	r2, [r3, #0]
			
        switch (a_ptr2configurations->pinMode)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	789b      	ldrb	r3, [r3, #2]
 8000ca2:	2b08      	cmp	r3, #8
 8000ca4:	bf8c      	ite	hi
 8000ca6:	2201      	movhi	r2, #1
 8000ca8:	2200      	movls	r2, #0
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	f040 808c 	bne.w	8000dca <GPIO_configurePin+0x1ea>
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	f003 0266 	and.w	r2, r3, #102	; 0x66
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	bf14      	ite	ne
 8000cc0:	2201      	movne	r2, #1
 8000cc2:	2200      	moveq	r2, #0
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d139      	bne.n	8000d3e <GPIO_configurePin+0x15e>
 8000cca:	f240 1211 	movw	r2, #273	; 0x111
 8000cce:	401a      	ands	r2, r3
 8000cd0:	2a00      	cmp	r2, #0
 8000cd2:	bf14      	ite	ne
 8000cd4:	2201      	movne	r2, #1
 8000cd6:	2200      	moveq	r2, #0
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	2a00      	cmp	r2, #0
 8000cdc:	d109      	bne.n	8000cf2 <GPIO_configurePin+0x112>
 8000cde:	f003 0308 	and.w	r3, r3, #8
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bf14      	ite	ne
 8000ce6:	2301      	movne	r3, #1
 8000ce8:	2300      	moveq	r3, #0
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d16e      	bne.n	8000dce <GPIO_configurePin+0x1ee>
            /* Do Nothing. */
            break;
        
        default:
            /* Do Nothing. */
            break;
 8000cf0:	e06b      	b.n	8000dca <GPIO_configurePin+0x1ea>
            GPIO_WRITE_TWO_BITS((*(LOC_ptr2GPIOx + a_ptr2configurations->portID))->PUPDR,a_ptr2configurations->pinID,(a_ptr2configurations->pinMode >> 2));
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	f107 020c 	add.w	r2, r7, #12
 8000cfc:	4413      	add	r3, r2
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	7852      	ldrb	r2, [r2, #1]
 8000d06:	0052      	lsls	r2, r2, #1
 8000d08:	2103      	movs	r1, #3
 8000d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0e:	43d2      	mvns	r2, r2
 8000d10:	401a      	ands	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	789b      	ldrb	r3, [r3, #2]
 8000d16:	089b      	lsrs	r3, r3, #2
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	f003 0103 	and.w	r1, r3, #3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	785b      	ldrb	r3, [r3, #1]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	fa01 f303 	lsl.w	r3, r1, r3
 8000d28:	4618      	mov	r0, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	f107 010c 	add.w	r1, r7, #12
 8000d34:	440b      	add	r3, r1
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4302      	orrs	r2, r0
 8000d3a:	60da      	str	r2, [r3, #12]
            break;
 8000d3c:	e048      	b.n	8000dd0 <GPIO_configurePin+0x1f0>
            GPIO_WRITE_TWO_BITS((*(LOC_ptr2GPIOx + a_ptr2configurations->portID))->OSPEEDR,a_ptr2configurations->pinID,a_ptr2configurations->pinSpeed);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	f107 020c 	add.w	r2, r7, #12
 8000d48:	4413      	add	r3, r2
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	7852      	ldrb	r2, [r2, #1]
 8000d52:	0052      	lsls	r2, r2, #1
 8000d54:	2103      	movs	r1, #3
 8000d56:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5a:	43d2      	mvns	r2, r2
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	78db      	ldrb	r3, [r3, #3]
 8000d62:	f003 0103 	and.w	r1, r3, #3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	785b      	ldrb	r3, [r3, #1]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d70:	4618      	mov	r0, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	f107 010c 	add.w	r1, r7, #12
 8000d7c:	440b      	add	r3, r1
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4302      	orrs	r2, r0
 8000d82:	609a      	str	r2, [r3, #8]
            GPIO_WRITE_ONE_BIT((*(LOC_ptr2GPIOx + a_ptr2configurations->portID))->OTYPER,a_ptr2configurations->pinID,(a_ptr2configurations->pinMode >> 2));
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	f107 020c 	add.w	r2, r7, #12
 8000d8e:	4413      	add	r3, r2
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	7852      	ldrb	r2, [r2, #1]
 8000d98:	4611      	mov	r1, r2
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	408a      	lsls	r2, r1
 8000d9e:	43d2      	mvns	r2, r2
 8000da0:	401a      	ands	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	789b      	ldrb	r3, [r3, #2]
 8000da6:	089b      	lsrs	r3, r3, #2
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	7849      	ldrb	r1, [r1, #1]
 8000db2:	408b      	lsls	r3, r1
 8000db4:	4618      	mov	r0, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	f107 010c 	add.w	r1, r7, #12
 8000dc0:	440b      	add	r3, r1
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4302      	orrs	r2, r0
 8000dc6:	605a      	str	r2, [r3, #4]
            break;
 8000dc8:	e002      	b.n	8000dd0 <GPIO_configurePin+0x1f0>
            break;
 8000dca:	bf00      	nop
 8000dcc:	e000      	b.n	8000dd0 <GPIO_configurePin+0x1f0>
            break;
 8000dce:	bf00      	nop
        }
    }

    return LOC_errorStatus;
 8000dd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3734      	adds	r7, #52	; 0x34
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bcb0      	pop	{r4, r5, r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	080010c8 	.word	0x080010c8

08000de4 <GPIO_setPinFuction>:
 *                                                          - Port ID Error.
 *                                                          - Pin ID Error.
 *                                                          - Pin Function Error.
 ====================================================================================================================*/
GPIO_errorStatusType GPIO_setPinFuction(GPIO_portIDType a_portID, GPIO_pinIDType a_pinID, GPIO_alternateFunctionType a_alternateFunction)
{
 8000de4:	b4b0      	push	{r4, r5, r7}
 8000de6:	b08d      	sub	sp, #52	; 0x34
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
 8000dee:	460b      	mov	r3, r1
 8000df0:	71bb      	strb	r3, [r7, #6]
 8000df2:	4613      	mov	r3, r2
 8000df4:	717b      	strb	r3, [r7, #5]
    GPIO_errorStatusType LOC_errorStatus = GPIO_NO_ERRORS;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    GPIOx_registersType* LOC_ptr2GPIOx[GPIO_NUM_OF_PORTS] = {GPIOA,GPIOB,GPIOC,GPIOD,GPIOE,GPIOF,GPIOG,GPIOH};
 8000dfc:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <GPIO_setPinFuction+0xe8>)
 8000dfe:	f107 040c 	add.w	r4, r7, #12
 8000e02:	461d      	mov	r5, r3
 8000e04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e08:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if(a_portID >= GPIO_NUM_OF_PORTS)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	2b07      	cmp	r3, #7
 8000e14:	d903      	bls.n	8000e1e <GPIO_setPinFuction+0x3a>
    {
        LOC_errorStatus = GPIO_PORT_ID_ERROR;
 8000e16:	2302      	movs	r3, #2
 8000e18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e1c:	e04f      	b.n	8000ebe <GPIO_setPinFuction+0xda>
    }

    else if(a_pinID >= GPIO_NUM_OF_PINS_PER_PORT)
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d903      	bls.n	8000e2c <GPIO_setPinFuction+0x48>
    {
        LOC_errorStatus = GPIO_PIN_ID_ERROR;
 8000e24:	2303      	movs	r3, #3
 8000e26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e2a:	e048      	b.n	8000ebe <GPIO_setPinFuction+0xda>
    }

    else if(a_alternateFunction > GPIO_AF15)
 8000e2c:	797b      	ldrb	r3, [r7, #5]
 8000e2e:	2b0f      	cmp	r3, #15
 8000e30:	d903      	bls.n	8000e3a <GPIO_setPinFuction+0x56>
    {
        LOC_errorStatus = GPIO_ALTERNATE_FUNCTION_ERROR;
 8000e32:	2307      	movs	r3, #7
 8000e34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e38:	e041      	b.n	8000ebe <GPIO_setPinFuction+0xda>
    }

    else if(a_pinID < 8)
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	2b07      	cmp	r3, #7
 8000e3e:	d81e      	bhi.n	8000e7e <GPIO_setPinFuction+0x9a>
    {
        GPIO_WRITE_FOUR_BITS((*(LOC_ptr2GPIOx + a_portID))->AFRL, (a_pinID) ,a_alternateFunction);
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	f107 020c 	add.w	r2, r7, #12
 8000e48:	4413      	add	r3, r2
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6a1b      	ldr	r3, [r3, #32]
 8000e4e:	79ba      	ldrb	r2, [r7, #6]
 8000e50:	0092      	lsls	r2, r2, #2
 8000e52:	210f      	movs	r1, #15
 8000e54:	fa01 f202 	lsl.w	r2, r1, r2
 8000e58:	43d2      	mvns	r2, r2
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	797b      	ldrb	r3, [r7, #5]
 8000e5e:	f003 010f 	and.w	r1, r3, #15
 8000e62:	79bb      	ldrb	r3, [r7, #6]
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	f107 010c 	add.w	r1, r7, #12
 8000e74:	440b      	add	r3, r1
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4302      	orrs	r2, r0
 8000e7a:	621a      	str	r2, [r3, #32]
 8000e7c:	e01f      	b.n	8000ebe <GPIO_setPinFuction+0xda>
    }

    else
    {
        GPIO_WRITE_FOUR_BITS((*(LOC_ptr2GPIOx + a_portID))->AFRH , (a_pinID-8) , a_alternateFunction);
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	f107 020c 	add.w	r2, r7, #12
 8000e86:	4413      	add	r3, r2
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8c:	79ba      	ldrb	r2, [r7, #6]
 8000e8e:	3a08      	subs	r2, #8
 8000e90:	0092      	lsls	r2, r2, #2
 8000e92:	210f      	movs	r1, #15
 8000e94:	fa01 f202 	lsl.w	r2, r1, r2
 8000e98:	43d2      	mvns	r2, r2
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	797b      	ldrb	r3, [r7, #5]
 8000e9e:	f003 010f 	and.w	r1, r3, #15
 8000ea2:	79bb      	ldrb	r3, [r7, #6]
 8000ea4:	3b08      	subs	r3, #8
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eac:	4618      	mov	r0, r3
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	f107 010c 	add.w	r1, r7, #12
 8000eb6:	440b      	add	r3, r1
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4302      	orrs	r2, r0
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return LOC_errorStatus;
 8000ebe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3734      	adds	r7, #52	; 0x34
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bcb0      	pop	{r4, r5, r7}
 8000eca:	4770      	bx	lr
 8000ecc:	080010c8 	.word	0x080010c8

08000ed0 <func>:

/* This Function Jumps TO The uSer Application */
/*In Our Code It will Wait 15 Seconds -> If Nothing Receieved It Will Jump To The User Application */

void func(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

#define SCB_VTOR   *((volatile u32*)0xE000ED08)


    /*Configure The Vector Table Location*/
	SCB_VTOR = 0x08001800;
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <func+0x1c>)
 8000ed6:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <func+0x20>)
 8000ed8:	601a      	str	r2, [r3, #0]

   /*Casting The Address To Pointer To Function */
   /*Then Add The * TO Get What In This Address----> */
	addr_to_call = *(Function_t*)(0x08001804);
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <func+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <func+0x28>)
 8000ee0:	6013      	str	r3, [r2, #0]
	addr_to_call();
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <func+0x28>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4798      	blx	r3
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	e000ed08 	.word	0xe000ed08
 8000ef0:	08001800 	.word	0x08001800
 8000ef4:	08001804 	.word	0x08001804
 8000ef8:	2000017c 	.word	0x2000017c

08000efc <main>:

void main(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
	u8 Local_u8RecStatus;


	RCC_voidInitSYSCLK();
 8000f02:	f7ff fb0d 	bl	8000520 <RCC_voidInitSYSCLK>

	/*RCC Enable USART_1*/
    RCC_voidEnablePeripheral(APB2_BUS ,USART1_EN) ; /*USART 1...*/
 8000f06:	210e      	movs	r1, #14
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f7ff fb33 	bl	8000574 <RCC_voidEnablePeripheral>
    RCC_voidEnablePeripheral(APB1_BUS ,USART3_EN) ; /*USART 3...*/
 8000f0e:	2112      	movs	r1, #18
 8000f10:	2002      	movs	r0, #2
 8000f12:	f7ff fb2f 	bl	8000574 <RCC_voidEnablePeripheral>
    RCC_voidEnablePeripheral(AHB_BUS,GPIOA_EN) ; /*Enable GPIOA */
 8000f16:	2111      	movs	r1, #17
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f7ff fb2b 	bl	8000574 <RCC_voidEnablePeripheral>
    RCC_voidEnablePeripheral(AHB_BUS,GPIOC_EN) ; /*Enable GPIOA */
 8000f1e:	2113      	movs	r1, #19
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff fb27 	bl	8000574 <RCC_voidEnablePeripheral>
    RCC_voidEnablePeripheral(AHB_BUS , 4) ; /*Enable FPEC*/
 8000f26:	2104      	movs	r1, #4
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f7ff fb23 	bl	8000574 <RCC_voidEnablePeripheral>


        GPIO_setPinFuction(GPIO_PORTC_ID,GPIO_PIN04_ID, GPIO_AF07);
 8000f2e:	2207      	movs	r2, #7
 8000f30:	2104      	movs	r1, #4
 8000f32:	2002      	movs	r0, #2
 8000f34:	f7ff ff56 	bl	8000de4 <GPIO_setPinFuction>
    	GPIO_setPinFuction(GPIO_PORTC_ID,GPIO_PIN05_ID, GPIO_AF07);
 8000f38:	2207      	movs	r2, #7
 8000f3a:	2105      	movs	r1, #5
 8000f3c:	2002      	movs	r0, #2
 8000f3e:	f7ff ff51 	bl	8000de4 <GPIO_setPinFuction>
    	GPIO_configurePin(&UART_PIN_TX);
 8000f42:	482a      	ldr	r0, [pc, #168]	; (8000fec <main+0xf0>)
 8000f44:	f7ff fe4c 	bl	8000be0 <GPIO_configurePin>
    	GPIO_configurePin(&UART_PIN_RX);
 8000f48:	4829      	ldr	r0, [pc, #164]	; (8000ff0 <main+0xf4>)
 8000f4a:	f7ff fe49 	bl	8000be0 <GPIO_configurePin>



   MUSART_voidInit(&UART) ;
 8000f4e:	4829      	ldr	r0, [pc, #164]	; (8000ff4 <main+0xf8>)
 8000f50:	f7ff fbd4 	bl	80006fc <MUSART_voidInit>

	MSTK_voidInit();
 8000f54:	f7ff fb4a 	bl	80005ec <MSTK_voidInit>

	MSTK_voidSetIntervalSingle(15000000,func);
 8000f58:	4927      	ldr	r1, [pc, #156]	; (8000ff8 <main+0xfc>)
 8000f5a:	4828      	ldr	r0, [pc, #160]	; (8000ffc <main+0x100>)
 8000f5c:	f7ff fb52 	bl	8000604 <MSTK_voidSetIntervalSingle>

	while(u8TimeOutFlag == 0)
 8000f60:	e039      	b.n	8000fd6 <main+0xda>
	{

		Local_u8RecStatus = MUSART1_u8RecCharSynch(FALSE ,&(u8RecBuffer[u8RecCounter]) );
 8000f62:	4b27      	ldr	r3, [pc, #156]	; (8001000 <main+0x104>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b26      	ldr	r3, [pc, #152]	; (8001004 <main+0x108>)
 8000f6c:	4413      	add	r3, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff fe01 	bl	8000b78 <MUSART1_u8RecCharSynch>
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
		if (Local_u8RecStatus == 1)
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d12a      	bne.n	8000fd6 <main+0xda>
		{
			MSTK_voidStopInterval();
 8000f80:	f7ff fb72 	bl	8000668 <MSTK_voidStopInterval>

			if(u8RecBuffer[u8RecCounter] == '\n')
 8000f84:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <main+0x104>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <main+0x108>)
 8000f8e:	5c9b      	ldrb	r3, [r3, r2]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b0a      	cmp	r3, #10
 8000f94:	d114      	bne.n	8000fc0 <main+0xc4>
			{
				if (u8BLWriteReq == 1)
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <main+0x10c>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d104      	bne.n	8000faa <main+0xae>
				{
					FPEC_voidEraseAppArea();
 8000fa0:	f7ff f918 	bl	80001d4 <FPEC_voidEraseAppArea>
					u8BLWriteReq = 0;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <main+0x10c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
				}

				/* Parse */
				Parser_voidParseRecord(u8RecBuffer);
 8000faa:	4816      	ldr	r0, [pc, #88]	; (8001004 <main+0x108>)
 8000fac:	f7ff faa0 	bl	80004f0 <Parser_voidParseRecord>
				MUSART1_VidSendStringSynch(FALSE,"ok");
 8000fb0:	4916      	ldr	r1, [pc, #88]	; (800100c <main+0x110>)
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f7ff fdc0 	bl	8000b38 <MUSART1_VidSendStringSynch>
				u8RecCounter = 0;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <main+0x104>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	e006      	b.n	8000fce <main+0xd2>
			}

			else
			{
				u8RecCounter ++ ;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <main+0x104>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <main+0x104>)
 8000fcc:	701a      	strb	r2, [r3, #0]
			}

			MSTK_voidSetIntervalSingle(15000000,func);
 8000fce:	490a      	ldr	r1, [pc, #40]	; (8000ff8 <main+0xfc>)
 8000fd0:	480a      	ldr	r0, [pc, #40]	; (8000ffc <main+0x100>)
 8000fd2:	f7ff fb17 	bl	8000604 <MSTK_voidSetIntervalSingle>
	while(u8TimeOutFlag == 0)
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <main+0x114>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0c0      	beq.n	8000f62 <main+0x66>
		else
		{

		}
	}
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000020 	.word	0x20000020
 8000ff0:	20000024 	.word	0x20000024
 8000ff4:	20000014 	.word	0x20000014
 8000ff8:	08000ed1 	.word	0x08000ed1
 8000ffc:	00e4e1c0 	.word	0x00e4e1c0
 8001000:	20000178 	.word	0x20000178
 8001004:	20000114 	.word	0x20000114
 8001008:	20000010 	.word	0x20000010
 800100c:	08001168 	.word	0x08001168
 8001010:	20000179 	.word	0x20000179

08001014 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001014:	480d      	ldr	r0, [pc, #52]	; (800104c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001016:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001018:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800101c:	480c      	ldr	r0, [pc, #48]	; (8001050 <LoopForever+0x6>)
  ldr r1, =_edata
 800101e:	490d      	ldr	r1, [pc, #52]	; (8001054 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <LoopForever+0xe>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001034:	4c0a      	ldr	r4, [pc, #40]	; (8001060 <LoopForever+0x16>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001042:	f000 f811 	bl	8001068 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001046:	f7ff ff59 	bl	8000efc <main>

0800104a <LoopForever>:

LoopForever:
  b LoopForever
 800104a:	e7fe      	b.n	800104a <LoopForever>
  ldr   r0, =_estack
 800104c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001058:	08001174 	.word	0x08001174
  ldr r2, =_sbss
 800105c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001060:	20000180 	.word	0x20000180

08001064 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC1_2_IRQHandler>
	...

08001068 <__libc_init_array>:
 8001068:	b570      	push	{r4, r5, r6, lr}
 800106a:	4d0d      	ldr	r5, [pc, #52]	; (80010a0 <__libc_init_array+0x38>)
 800106c:	4c0d      	ldr	r4, [pc, #52]	; (80010a4 <__libc_init_array+0x3c>)
 800106e:	1b64      	subs	r4, r4, r5
 8001070:	10a4      	asrs	r4, r4, #2
 8001072:	2600      	movs	r6, #0
 8001074:	42a6      	cmp	r6, r4
 8001076:	d109      	bne.n	800108c <__libc_init_array+0x24>
 8001078:	4d0b      	ldr	r5, [pc, #44]	; (80010a8 <__libc_init_array+0x40>)
 800107a:	4c0c      	ldr	r4, [pc, #48]	; (80010ac <__libc_init_array+0x44>)
 800107c:	f000 f818 	bl	80010b0 <_init>
 8001080:	1b64      	subs	r4, r4, r5
 8001082:	10a4      	asrs	r4, r4, #2
 8001084:	2600      	movs	r6, #0
 8001086:	42a6      	cmp	r6, r4
 8001088:	d105      	bne.n	8001096 <__libc_init_array+0x2e>
 800108a:	bd70      	pop	{r4, r5, r6, pc}
 800108c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001090:	4798      	blx	r3
 8001092:	3601      	adds	r6, #1
 8001094:	e7ee      	b.n	8001074 <__libc_init_array+0xc>
 8001096:	f855 3b04 	ldr.w	r3, [r5], #4
 800109a:	4798      	blx	r3
 800109c:	3601      	adds	r6, #1
 800109e:	e7f2      	b.n	8001086 <__libc_init_array+0x1e>
 80010a0:	0800116c 	.word	0x0800116c
 80010a4:	0800116c 	.word	0x0800116c
 80010a8:	0800116c 	.word	0x0800116c
 80010ac:	08001170 	.word	0x08001170

080010b0 <_init>:
 80010b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b2:	bf00      	nop
 80010b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010b6:	bc08      	pop	{r3}
 80010b8:	469e      	mov	lr, r3
 80010ba:	4770      	bx	lr

080010bc <_fini>:
 80010bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010be:	bf00      	nop
 80010c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010c2:	bc08      	pop	{r3}
 80010c4:	469e      	mov	lr, r3
 80010c6:	4770      	bx	lr
